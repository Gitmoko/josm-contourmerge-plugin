plugins {
    id 'org.openstreetmap.josm' version '0.2.1'
    id 'java'
    id 'groovy'
    id 'eclipse'
}

def currentPluginVersion(config) {
    return config.releases.collect {it.pluginVersion}.max()
}

def currentPluginMainVersion(config) {
    return config.releases.collect {it.josmVersion}.max()
}

def bestPluginVersion(config, josmVersion) {
    return config.releases
        .findAll{it.josmVersion == josmVersion}
        .collect{it.pluginVersion}
        .max()
}

repositories {
    mavenCentral()
}

dependencies {

    compileOnly "org.projectlombok:lombok:1.16.10"

    packIntoJar group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    
    implementation group: 'javax.validation', name: 'validation-api', version: '1.0.0.GA'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    
    testImplementation group: 'junit', name: 'junit', version: '4.+' 
    testImplementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.12'
    testImplementation group: 'javax.validation', name: 'validation-api', version: '1.0.0.GA'
    testImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
}


task wrapper(type: Wrapper) {
     gradleVersion = '4.4'
}

def ConfigObject releaseHistory = new ConfigSlurper().parse(file("releases.conf").text)

version = currentPluginVersion(releaseHistory)
archivesBaseName = "contourmerge"

josm {
    josmCompileVersion = "latest"
    manifest {
        description = 'Merges the contours of two areas'
        minJosmVersion = currentPluginMainVersion(releaseHistory)
        mainClass = 'org.openstreetmap.josm.plugins.contourmerge.ContourMergePlugin'
        iconPath = 'images/mapmode/contourmerge.png'
        website = new URL("http://wiki.openstreetmap.org/index.php/JOSM/Plugins/ContourMerge")
        canLoadAtRuntime = true
        releaseHistory.releases.collect{it.josmVersion}.unique().sort().each {jv ->
            def String dv = bestPluginVersion(releaseHistory, jv)
            oldVersionDownloadLink jv, dv,
                new URL("https://raw.github.com/Gubaer/josm-contourmerge-plugin"
                      + "/for-josm-${jv}/dist/${archivesBaseName}.jar")
        }
    }
}

compileJava {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
}

test {
    useJUnit()
    systemProperty "josm.home", file("test/josm.home")

    afterTest { desc, result -> 
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

sourceSets {
    main {
        java.srcDirs = ["src"]
        resources {
            srcDir file(".")
            include "README.md"
            include "LICENSE"
            include "images/**/*"
            exclude "images/*.svg"
            exclude "images/**/*.svg"
        }
    }
    test {
        groovy.srcDirs = ["test/src"]
        resources {
            srcDir file("test/config")
        }
    }
}

tasks.dist.into("$projectDir/dist")

task deploy {
    doLast {
        def config = new ConfigSlurper().parse(file("releases.conf").text)
        def deployBranch = "deploy"
        def jar = "$projectDir/dist/${archivesBaseName}.jar"
        Git.ensureOnBranch(deployBranch)
        Git.add(jar)
        Git.commit(jar, "committed plugin build ${currentPluginVersion(config)}") 
        def tag = "for-josm-${currentPluginMainVersion(config)}"
        Git.tagHead(tag)
        Git.push("origin", deployBranch)
        Git.pushTags()
    }
}

class Git {
    static private def executeAndLog(cmd) {
        def proc = cmd.execute()
        proc.waitFor()
        println "Exit Value: ${proc.exitValue()}"
        println "Output: ${proc.in.text}"
        println "Error: ${proc.err.text}"
        if (proc.exitValue() != 0) {
            throw new Error("git command failed. command was <$cmd>")
        }
    }

    static def ensureOnBranch(branch) {
        def proc = "git rev-parse --abbrev-ref HEAD".execute()  
        def ret = proc.in.text.trim()
        if (ret != branch) {
            throw new Error("currently on branch '$ret', but expected branch '$branch'")
        }
    }

    static def add(file) {
        executeAndLog(["git", "add", file])
    }

    static def commit(file, message) {
        executeAndLog(["git", "commit", "-m", message, file])
    }

    static def push(remote, branch) {
        executeAndLog("git push $remote $branch")
    }

    static def tagHead(tag) {
        executeAndLog(["git", "tag", "-f", tag, "HEAD"])
    }

    static def pushTags() {
        executeAndLog("git push --tags -f") 
    }
}
